function init(self)
	-- Current game object ( AKA "."). which is `this`
	-- "acquire_input_focus", means "Hey engine, I should receive input actions, plz see `on_input()` function"
	msg.post(".", "acquire_input_focus")

	self.moving = false                       -- [3]
	self.firing = false                       -- [1]
	self.input = vmath.vector3()              -- [4]
	self.dir = vmath.vector3(0, 1, 0)         -- [5]
	self.speed = 50                           -- [6]
	self.current_anim = hash("anim-player-down") -- [2]
end

function final(self)
	msg.post(".", "release_input_focus") -- [8]
end

function update(self, dt)
	if self.moving then
		local pos = go.get_position()    -- [10]
		pos = pos + self.dir * self.speed * dt -- [11]
		go.set_position(pos)             -- [12]
	end

	self.input.x = 0 -- [13]
	self.input.y = 0
	self.moving = false

	if self.firing then
		local angle = math.atan2(self.dir.y, self.dir.x) -- [1]
		local rot = vmath.quat_rotation_z(angle)   -- [2]
		local props = { dir = self.dir }           -- [3]

		-- factory could be seen as a built-in class
		-- it support create instances by using `#` like url + id
		-- you also need to setup the spawnered `prototype` in the editor!
		factory.create("#rocket-spawner", go.get_position(), rot, props)
	end
	self.firing = false
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		go.set_position(go.get_position() + message.normal * message.distance)
	end
end


local function change_anim_state(self, anim_str)
	if self.current_anim ~= hash(anim_str) then
		msg.post("#sprite", "play_animation", { id = hash(anim_str) }) -- [7]
		self.current_anim = hash(anim_str)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = 1                                                  -- [15]
		change_anim_state(self, "anim-player-up");
	elseif action_id == hash("down") then
		self.input.y = -1
		change_anim_state(self, "anim-player-down");
	elseif action_id == hash("left") then
		self.input.x = -1
		change_anim_state(self, "anim-player-left");
	elseif action_id == hash("right") then		
		self.input.x = 1
		change_anim_state(self, "anim-player-right");
	elseif action_id == hash("fire") and action.pressed then
		self.firing = true
	end

	if vmath.length(self.input) > 0 then
		self.moving = true               -- [16]
		self.dir = vmath.normalize(self.input) -- [17]
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
